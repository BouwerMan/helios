HELIOS_ROOT ?= $(shell git rev-parse --show-toplevel 2>/dev/null || echo $(CURDIR))
include $(HELIOS_ROOT)/toolchain.mk

BUILDDIR ?= build

ARCHDIR=arch/$(HOST_ARCH)
include $(ARCHDIR)/make.config

# --- Includes & flags ---------------------------------------------------------
# Project headers: use -I (we want warnings on our own headers)
# Means C preprocessor flags:
LIBC_CPPFLAGS := $(CPPFLAGS) -D__is_libc \
		 -Iinclude -I$(ARCHDIR)/include \
		 -isystem$(SYSROOT)$(INCLUDEDIR)

# Compile knobs: inherit toolchain defaults + arch extras
LIBC_CFLAGS   := $(CFLAGS) $(ARCH_CFLAGS) -pedantic

# --- Sources ------------------------------------------------------------------
SRC_DIRS:=ctype stdio stdlib string sys unistd $(ARCHDIR)

ASM_SRCS_ALL := $(sort $(shell find $(SRC_DIRS) -type f -name '*.asm'))

C_SRCS   := $(sort $(shell find $(SRC_DIRS) -type f -name '*.c'))
CRT_SRCS := $(ARCHDIR)/crt0.asm $(ARCHDIR)/crti.asm $(ARCHDIR)/crtn.asm
ASM_SRCS := $(filter-out $(CRT_SRCS),$(ASM_SRCS_ALL))

# objects that DO go into libc.a
C_OBJS   := $(patsubst %.c,$(BUILDDIR)/%.libc.o,$(C_SRCS))
ASM_OBJS := $(patsubst %.asm,$(BUILDDIR)/%.libc.o,$(ASM_SRCS))
CRT_OBJS := $(patsubst $(ARCHDIR)/%.asm,$(BUILDDIR)/%.o,$(CRT_SRCS))

BINARIES := $(BUILDDIR)/libc.a $(CRT_OBJS)

.PHONY: all clean install install-headers install-libs libc
.SUFFIXES: .o .libc.o .c .S .asm

all: libc 

libc: $(BUILDDIR)/libc.a
	@echo "Libc built successfully."

$(BUILDDIR)/libc.a: $(C_OBJS) $(ASM_OBJS)
	@echo "  AR      $@"
	@mkdir -p $(@D)
	@$(AR) $(ARFLAGS) $@ $^

$(BUILDDIR)/%.libc.o: %.c
	@echo "  CC      $@"
	@mkdir -p $(@D)
	@$(CC) $(LIBC_CPPFLAGS) $(LIBC_CFLAGS) -c $< -o $@

$(BUILDDIR)/%.libc.o: %.asm
	@echo "  AS      $@"
	@mkdir -p $(@D)
	@$(NASM) $(NASMFLAGS) $< -o $@

# Build CRT objects from arch path into $(BUILDDIR) with final names
$(CRT_OBJS): $(BUILDDIR)/%.o : $(ARCHDIR)/%.asm
	@echo "  AS      $@"
	@mkdir -p $(@D)
	@$(NASM) $(NASMFLAGS) $< -o $@
	
install: install-libs

install-headers:
	@echo "Installing Libc headers..."
	@mkdir -p $(DESTDIR)/$(INCLUDEDIR)
	@rsync -a --exclude='internal/' include/. $(DESTDIR)/$(INCLUDEDIR)/.

install-libs: $(BINARIES)
	@mkdir -p $(DESTDIR)/$(LIBDIR)
	@cp $(BINARIES) $(DESTDIR)/$(LIBDIR)
	@cp $(CRT_OBJS) $(DESTDIR)/$(LIBDIR)

clean:
	@echo "Cleaning build directory..."
	@rm -rf $(BUILDDIR)

# Dependency includes (generated by -MMD -MP in LIBC_CPPFLAGS)
-include $(C_OBJS:.o=.d)
